import cv2
from PIL import Image
import imutils
from resizeimage import resizeimage
import numpy as np
#load the image
imagew=cv2.imread(r'C:\Users\Ananthakrishnan\Pictures\anand\kari.jpg')
#resize the image
img=imutils.resize(imagew, height = 500)
#cv2.imshow('kari', imagew)
cv2.imshow('kari2', img)
#convert image to grayscale, blur it and find edges in the image
gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
gray=cv2.GaussianBlur(gray, (5,5), 0)
edged=cv2.Canny(gray, 75, 200)
#showing the edge detected image
print('STEP !: edge detection')
cv2.imshow('kari3', edged)
cv2.waitKey(0)
cv2.destroyAllWindows()
#finding the contours
cnts= cv2.findContours(edged,cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
cnts=imutils.grab_contours(cnts)
#finding the largest contour by sorting out the contour list in descending order
cnts=sorted(cnts, key=cv2.contourArea, reverse=True)
for c in cnts:
    #find the perimeter by counting the number of closed loops.. i think so
    peri=cv2.arcLength(c,True)
minL= 500
maxL=5
lines=cv2.HoughLinesP(edged, 1, np.pi/180, 90, minL, maxL)
#for x in range(0, len(lines)):
#for x1, y1, x2, y2 in lines(x):
#cv2.line(edged, (x1,y1), (x2,y2), (0,255,0), 2)
peri1=np.array(peri).reshape((-1,1)).astype(np.int32)
cv2.drawContours(edged,[peri],-1, (0,255,0),3)
cv2.imshow('outline', edged)
